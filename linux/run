#!/bin/bash
# Collect data.

# Make sure we're root.
[[ $UID == 0 || $EUID == 0 ]] || (
  echo "Must be root!"
  exit 1
  ) || exit 1

# Where should we store the data?
savedir=$1
if ! [[ -n $savedir ]]; then
  echo -n "Directory to store data: "
  read savedir
  [[ -d $savedir ]] || mkdir -p "$savedir" || (
    echo "Not a valid directory."
    exit 1
    ) || exit 1
fi

# Where are our binaries?
bin="$(pwd)/tools/$(uname -m)/bin"
[[ -d $bin ]] || ( 
  echo "Linux IR binaries cannot be found."
  echo "This script must be run inside its own directory."
  exit 1
  ) || exit 1

# Create directory structure.
saveto="$savedir/$(hostname)-$(date +%Y.%m.%d-%H.%M.%S)"
mkdir -p "$saveto"
logfile="$saveto/log.txt"

log() {
  echo "$(date +"%b %d %H:%M:%S") $(hostname) irscript: $1" | tee -a "$logfile"
}

# Start the log.
echo -n > "$logfile"
log "# Incident response volatile data collection script."
log "# Starting data collection..."

# 1. Acquire a full memory dump.
log "# Starting dc3dd to dump system memory..."
memfile="$saveto/memdump-$(hostname)-linux-$(uname -m)"
log "$bin/dc3dd if=/dev/mem hash=sha256 of='${memfile}.dd' log='${memfile}.log' hlog='${memfile}.sum'"
"$bin/dc3dd" if=/dev/mem hash=sha256 of="${memfile}.dd" \
             log="${memfile}.log" hlog="${memfile}.sum"
log "# dc3dd finished."

# 2. Collect network information.
log "# Collecting network information..."
log "netstat -ap > $saveto/network.txt 2>&1"
netstat -ap > "$saveto/network.txt" 2>&1
             
# 3. Collect information about opened files and running processes.
log "# Collecting information about opened files and running processes."
log "lsof > $saveto/opened_files.txt 2>&1"
lsof > "$saveto/opened_files.txt" 2>&1

# 4. Collect user/system information.
log "# Collecting user/system information."
log "w > $saveto/users_w.txt 2>&1"
w > "$saveto/users_w.txt" 2>&1
log "who > $saveto/users_who.txt 2>&1"
who > "$saveto/users_who.txt" 2>&1
log "id > $saveto/users_id.txt 2>&1"
id > "$saveto/users_id.txt" 2>&1
log "uname -a > $saveto/system_uname.txt 2>&1"
uname -a > "$saveto/system_uname.txt" 2>&1
log "# Dumping kernel message buffer (dmesg)."
log "dmesg > $saveto/system_dmesg.txt 2>&1"
dmesg > "$saveto/system_dmesg.txt" 2>&1

# 5. Collect device information.
log "# Collecting information about currently mounted devices."
log "mount > $saveto/mounted_devices.txt 2>&1"
mount > "$saveto/mounted_devices.txt" 2>&1

# Create checksums for all files
log "# Creating checksums (sha256sum) for all files."
log "sha256sum $saveto/* > $saveto/sha256sums.txt"
sha256sum "$saveto/"* > "$saveto/sha256sums.txt"
log "sed -i 's/^.*sha256sums.txt.*$//; s/^.*log.txt.*$//' $saveto/sha256sums.txt"
sed -i 's/^.*sha256sums.txt.*$//; s/^.*log.txt.*$//' "$saveto/sha256sums.txt"

log "# All tasks completed. Exiting."
